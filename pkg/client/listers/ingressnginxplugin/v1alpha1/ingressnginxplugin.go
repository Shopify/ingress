/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/ingress-nginx/pkg/apis/ingressnginxplugin/v1alpha1"
)

// IngressNginxPluginLister helps list IngressNginxPlugins.
type IngressNginxPluginLister interface {
	// List lists all IngressNginxPlugins in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IngressNginxPlugin, err error)
	// IngressNginxPlugins returns an object that can list and get IngressNginxPlugins.
	IngressNginxPlugins(namespace string) IngressNginxPluginNamespaceLister
	IngressNginxPluginListerExpansion
}

// ingressNginxPluginLister implements the IngressNginxPluginLister interface.
type ingressNginxPluginLister struct {
	indexer cache.Indexer
}

// NewIngressNginxPluginLister returns a new IngressNginxPluginLister.
func NewIngressNginxPluginLister(indexer cache.Indexer) IngressNginxPluginLister {
	return &ingressNginxPluginLister{indexer: indexer}
}

// List lists all IngressNginxPlugins in the indexer.
func (s *ingressNginxPluginLister) List(selector labels.Selector) (ret []*v1alpha1.IngressNginxPlugin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressNginxPlugin))
	})
	return ret, err
}

// IngressNginxPlugins returns an object that can list and get IngressNginxPlugins.
func (s *ingressNginxPluginLister) IngressNginxPlugins(namespace string) IngressNginxPluginNamespaceLister {
	return ingressNginxPluginNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressNginxPluginNamespaceLister helps list and get IngressNginxPlugins.
type IngressNginxPluginNamespaceLister interface {
	// List lists all IngressNginxPlugins in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IngressNginxPlugin, err error)
	// Get retrieves the IngressNginxPlugin from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IngressNginxPlugin, error)
	IngressNginxPluginNamespaceListerExpansion
}

// ingressNginxPluginNamespaceLister implements the IngressNginxPluginNamespaceLister
// interface.
type ingressNginxPluginNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressNginxPlugins in the indexer for a given namespace.
func (s ingressNginxPluginNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngressNginxPlugin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressNginxPlugin))
	})
	return ret, err
}

// Get retrieves the IngressNginxPlugin from the indexer for a given namespace and name.
func (s ingressNginxPluginNamespaceLister) Get(name string) (*v1alpha1.IngressNginxPlugin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingressnginxplugin"), name)
	}
	return obj.(*v1alpha1.IngressNginxPlugin), nil
}
